name: Update MaterialTheme from Tokens

on:
  push:
    branches: [main, master]
    paths: ['tokens.json']
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-theme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install requirements
        run: pip install json5

      - name: Update Colors and Spacing
        run: |
          python3 << 'EOF'
          import json5
          import os

          # Load tokens
          with open('tokens.json', 'r') as f:
              tokens = json5.load(f)
          
          # Extract colors from the new structure
          color_variations = {}
          if 'Colors/Mode 1' in tokens:
              color_tokens = tokens['Colors/Mode 1']
              for color_family, shades in color_tokens.items():
                  if isinstance(shades, dict):
                      for shade, color_data in shades.items():
                          if isinstance(color_data, dict) and 'value' in color_data and color_data.get('type') == 'color':
                              key = f"{color_family}_{shade}"
                              color_variations[key] = str(color_data['value'])
          
          # Set default colors
          primary_color = color_variations.get('purple_500', '#7d4dbe')
          secondary_color = color_variations.get('purple_600', '#6436ab')
          error_color = color_variations.get('red_500', '#e1251b')
          surface_color = color_variations.get('neutral_0', '#ffffff')
          background_color = color_variations.get('neutral_100', '#f6f6f6')
          
          # Extract spacing values
          spacing_values = {}
          if 'Spacing/Mode 1' in tokens:
              space_tokens = tokens['Spacing/Mode 1']
              for key, space_data in space_tokens.items():
                  if isinstance(space_data, dict) and 'value' in space_data:
                      # Remove 'px' from key and use the numeric value
                      clean_key = key.replace('px', '')
                      spacing_values[clean_key] = str(space_data['value'])
          
          # Extract border radius values
          border_radius_values = {}
          if 'Border radius/Mode 1' in tokens:
              border_tokens = tokens['Border radius/Mode 1']
              for key, token in border_tokens.items():
                  if isinstance(token, dict) and 'value' in token:
                      # Convert to dp for Android
                      value = int(token['value'])
                      border_radius_values[key] = value
          
          # Extract typography values
          font_sizes = {}
          font_families = {}
          line_heights = {}
          
          if 'Typography/Mode 1' in tokens:
              typography_tokens = tokens['Typography/Mode 1']
              for key, token_data in typography_tokens.items():
                  if isinstance(token_data, dict) and 'value' in token_data:
                      token_type = token_data.get('type', '')
                      if token_type == 'fontSizes':
                          font_sizes[key] = str(token_data['value'])
                      elif token_type == 'fontFamilies':
                          font_families[key] = str(token_data['value'])
                      elif token_type == 'lineHeights':
                          line_heights[key] = str(token_data['value'])
          
          # Create color file
          color_content = "package com.example.tokentest.ui.theme\n\n"
          color_content += "import androidx.compose.ui.graphics.Color\n\n"
          color_content += "// Auto-generated from tokens.json\n"
          color_content += "val Primary = Color(0xFF" + primary_color.replace('#', '') + ")\n"
          color_content += "val Secondary = Color(0xFF" + secondary_color.replace('#', '') + ")\n"
          color_content += "val ErrorColor = Color(0xFF" + error_color.replace('#', '') + ")\n"
          color_content += "val Surface = Color(0xFF" + surface_color.replace('#', '') + ")\n"
          color_content += "val Background = Color(0xFF" + background_color.replace('#', '') + ")\n\n"
          
          # Add color variations
          color_content += "// Color Variations from tokens\n"
          for color_name, hex_value in sorted(color_variations.items()):
              safe_name = color_name.replace("-", "").replace("_", "").capitalize()
              if len(safe_name) > 0:
                  color_content += "val " + safe_name + " = Color(0xFF" + hex_value.replace('#', '') + ")\n"
          
          color_content += "\n// Legacy colors for compatibility\n"
          color_content += "val Purple80 = Color(0xFFD0BCFF)\n"
          color_content += "val PurpleGrey80 = Color(0xFFCCC2DC)\n"
          color_content += "val Pink80 = Color(0xFFEFB8C8)\n"
          color_content += "val Purple40 = Primary\n"
          color_content += "val PurpleGrey40 = Secondary\n"
          color_content += "val Pink40 = ErrorColor\n"
          
          # Write color file
          with open('app/src/main/java/com/example/tokentest/ui/theme/Color.kt', 'w') as f:
              f.write(color_content)
          
          # Create border radius file
          radius_content = "package com.example.tokentest.ui.theme\n\n"
          radius_content += "import androidx.compose.ui.unit.dp\n\n"
          radius_content += "// Auto-generated border radius from tokens.json\n"
          
          # Map the available border radius values to meaningful names
          if border_radius_values:
              if "standard" in border_radius_values:
                  standard_value = border_radius_values["standard"]
                  radius_content += f"val BorderRadiusSmall = {standard_value // 2}.dp\n"
                  radius_content += f"val BorderRadiusMedium = {standard_value}.dp\n"
                  radius_content += f"val BorderRadiusLarge = {standard_value * 2}.dp\n"
              
              # Add any other border radius values directly
              for key, dp_value in border_radius_values.items():
                  if key != "standard":  # Skip standard as we've already handled it
                      safe_name = key.replace("-", "").replace("_", "").capitalize()
                      radius_content += f"val BorderRadius{safe_name} = {dp_value}.dp\n"
          
          # Write border radius file
          with open('app/src/main/java/com/example/tokentest/ui/theme/BorderRadius.kt', 'w') as f:
              f.write(radius_content)
          
          # Create typography file
          typography_content = "package com.example.tokentest.ui.theme\n\n"
          typography_content += "import androidx.compose.ui.text.font.FontFamily\n"
          typography_content += "import androidx.compose.ui.text.font.FontWeight\n"
          typography_content += "import androidx.compose.ui.unit.sp\n\n"
          typography_content += "// Auto-generated typography from tokens.json\n\n"
          
          # Add font families
          typography_content += "// Font Families\n"
          for family_name, font_value in sorted(font_families.items()):
              safe_name = family_name.replace("-", "").replace("_", "").capitalize()
              typography_content += f"val FontFamily{safe_name} = FontFamily.Default\n"
          
          # Add font sizes
          typography_content += "\n// Font Sizes\n"
          for key, sp_value in sorted(font_sizes.items()):
              if key.isdigit() and int(key) < 20:  # Only include reasonable font sizes
                  typography_content += "val FontSize" + key + " = " + sp_value + ".sp\n"
          
          # Add line heights
          typography_content += "\n// Line Heights\n"
          for key, line_height in sorted(line_heights.items()):
              typography_content += "val LineHeight" + key + " = " + line_height + ".sp\n"
          
          typography_content += "\n// Common typography shortcuts\n"
          typography_content += "val HeadingLarge = FontSize0\n"
          typography_content += "val HeadingMedium = FontSize2\n"
          typography_content += "val BodyLarge = FontSize14\n"
          typography_content += "val BodyMedium = FontSize16\n"
          typography_content += "val BodySmall = FontSize18\n"
          
          # Write typography file
          with open('app/src/main/java/com/example/tokentest/ui/theme/Typography.kt', 'w') as f:
              f.write(typography_content)
          
          # Create spacing file
          spacing_content = "package com.example.tokentest.ui.theme\n\n"
          spacing_content += "import androidx.compose.ui.unit.dp\n\n"
          spacing_content += "// Auto-generated spacing from tokens.json\n"
          
          # Add spacing constants
          spacing_names = {
              "0": "None",
              "2": "XXS", 
              "4": "XS",
              "8": "SM",
              "12": "MD", 
              "16": "LG",
              "20": "XL",
              "24": "XXL",
              "32": "XXXL",
              "40": "Giant",
              "48": "Huge",
              "56": "Massive",
              "64": "Epic"
          }
          
          for key, dp_value in spacing_values.items():
              if key in spacing_names:
                  name = spacing_names[key]
                  spacing_content += "val Spacing" + name + " = " + dp_value + ".dp\n"
          
          spacing_content += "\n// Common spacing shortcuts\n"
          spacing_content += "val PaddingSmall = SpacingSM\n"
          spacing_content += "val PaddingMedium = SpacingLG\n" 
          spacing_content += "val PaddingLarge = SpacingXXL\n"
          
          # Write spacing file
          with open('app/src/main/java/com/example/tokentest/ui/theme/Spacing.kt', 'w') as f:
              f.write(spacing_content)
          
          print("✅ Updated colors and spacing successfully!")
          print(f"📏 Found {len(spacing_values)} spacing tokens")
          print(f"🎨 Found {len(color_variations)} color variations")
          print(f"📐 Found {len(border_radius_values)} border radius tokens")
          print(f"🔤 Found {len(font_sizes)} typography tokens")
          print(f"📝 Found {len(font_families)} font families")
          print(f"📏 Found {len(line_heights)} line heights")
          EOF

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app/src/main/java/com/example/tokentest/ui/theme/Color.kt
          git add app/src/main/java/com/example/tokentest/ui/theme/BorderRadius.kt
          git add app/src/main/java/com/example/tokentest/ui/theme/Typography.kt
          git add app/src/main/java/com/example/tokentest/ui/theme/Spacing.kt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🎨 Update colors, spacing, border radius and typography from tokens.json"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          fi
